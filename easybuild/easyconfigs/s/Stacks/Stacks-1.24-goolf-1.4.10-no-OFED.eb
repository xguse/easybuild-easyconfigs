# Built with EasyBuild version 1.16.1 on 2015-01-22_08-13-37

# Original file: /home/gus/remote_mounts/louise/.local/easybuild/ebfiles_repo/Stacks/Stacks-1.03-goolf-1.4.10-no-OFED.eb

# Tweaked by Gus Dun to install stacks-1.24

easyblock = 'ConfigureMake'

name = 'Stacks'
version = '1.24'

homepage = 'http://creskolab.uoregon.edu/stacks/'
description = """Stacks is a software pipeline for building loci from short-read sequences, such as those generated on
 the Illumina platform. Stacks was developed to work with restriction enzyme-based data, such as RAD-seq, for the purpose
 of building genetic maps and conducting population genomics and phylogeography.
"""
toolchain = {'name': 'goolf', 'version': '1.4.10-no-OFED'} # tweaked by EasyBuild (was: {'name': 'goolf', 'version': '1.4.10'})

source_urls = ['http://creskolab.uoregon.edu/stacks/source/']
sources = [SOURCELOWER_TAR_GZ]



configopts = ['--enable-sparsehash', '--enable-bam',
              '--with-bam-include-path=/home2/wd238/.local/easybuild/software/SAMtools/1.1-goolf-1.4.10-no-OFED/include/bam',
              # '--with-bam-lib-path=/usr/local/lib',
             ]

builddependencies = [('zlib', '1.2.7'), ('SAMtools', '1.1'), ('google-sparsehash', '2.0.2')]


sanity_check_paths = {
    'files': [
        'bin/%s' % binfile for binfile in [
            'clone_filter', 'denovo_map.pl', 'exec_velvet.pl', 'genotypes', 'index_radtags.pl', 'load_radtags.pl',
            'populations', 'process_shortreads', 'ref_map.pl', 'sstacks', 'ustacks', 'cstacks', 'estacks',
            'export_sql.pl', 'hstacks', 'kmer_filter', 'load_sequences.pl', 'process_radtags', 'pstacks',
            'sort_read_pairs.pl', 'stacks_export_notify.pl',
        ]
    ],
    'dirs': [],
}

moduleclass = 'bio'




# $ eb -a -b ConfigureMake
# Available easyconfig parameters
# MANDATORY
# ---------
# description:            A short description of the software (default: None)
# docurls:                List of urls with documentation of the software (not necessarily on homepage) (default: None)
# homepage:               The homepage of the software (default: None)
# name:                   Name of software (default: None)
# software_license:       Software license (default: None)
# software_license_urls:  List of software license locations (default: None)
# toolchain:              Name and version of toolchain (default: None)
# version:                Version of software (default: None)

# EASYBLOCK-SPECIFIC
# ------------------

# TOOLCHAIN
# ---------
# onlytcmod:              Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored). (default: False)
# toolchainopts:          Extra options for compilers (default: None)

# BUILD
# -----
# buildopts:              Extra options passed to make step (default already has -j X) (default: )
# checksums:              Checksums for sources and patches (default: [])
# configopts:             Extra options passed to configure (default already has --prefix) (default: )
# easyblock:              EasyBlock to use for building; if set to None, an easyblock is selected based on the software name (default: None)
# easybuild_version:      EasyBuild-version this spec-file was written for (default: None)
# installopts:            Extra options for installation (default: )
# maxparallel:            Max degree of parallelism (default: None)
# parallel:               Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit) (default: None)
# patches:                List of patches to apply (default: [])
# postinstallcmds:        Commands to run after the install step. (default: [])
# prebuildopts:           Extra options pre-passed to build command. (default: )
# preconfigopts:          Extra options pre-passed to configure. (default: )
# preinstallopts:         Extra prefix options for installation. (default: )
# runtest:                Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test) (default: None)
# sanity_check_commands:  format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h') (default: [])
# sanity_check_paths:     List of files and directories to check (format: {'files':<list>, 'dirs':<list>}) (default: {})
# skip:                   Skip existing software (default: False)
# skipsteps:              Skip these steps (default: [])
# source_urls:            List of URLs for source files (default: [])
# sources:                List of source files (default: [])
# stop:                   Keyword to halt the build process after a certain step. (default: None)
# tests:                  List of test-scripts to run after install. A test script should return a non-zero exit status to fail (default: [])
# unpack_options:         Extra options for unpacking source (default: None)
# unwanted_env_vars:      List of environment variables that shouldn't be set during build (default: [])
# versionprefix:          Additional prefix for software version (placed before version and toolchain name) (default: )
# versionsuffix:          Additional suffix for software version (placed after toolchain name) (default: )

# FILE-MANAGEMENT
# ---------------
# buildininstalldir:      Boolean to build (True) or not build (False) in the installation directory (default: False)
# cleanupoldbuild:        Boolean to remove (True) or backup (False) the previous build directory with identical name or not. (default: True)
# cleanupoldinstall:      Boolean to remove (True) or backup (False) the previous install directory with identical name or not. (default: True)
# dontcreateinstalldir:   Boolean to create (False) or not create (True) the install directory (default: False)
# keeppreviousinstall:    Boolean to keep the previous installation with identical name. Experts only! (default: False)
# keepsymlinks:           Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied (default: False)
# start_dir:              Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path. (default: None)

# DEPENDENCIES
# ------------
# allow_system_deps:      Allow listed system dependencies (format: (<name>, <version>)) (default: [])
# builddependencies:      List of build dependencies (default: [])
# dependencies:           List of dependencies (default: [])
# hiddendependencies:     List of dependencies available as hidden modules (default: [])
# osdependencies:         OS dependencies that should be present on the system (default: [])

# LICENSE
# -------
# group:                  Name of the user group for which the software should be available (default: None)
# key:                    Key for installing software (default: None)
# license_file:           License file for software (default: None)
# license_server:         License server for software (default: None)
# license_server_port:    Port for license server (default: None)

# EXTENSIONS
# ----------
# exts_classmap:          Map of extension name to class for handling build and installation. (default: {})
# exts_defaultclass:      List of module for and name of the default extension class (default: None)
# exts_filter:            Extension filter details: template for cmd and input to cmd (templates for name, version and src). (default: None)
# exts_list:              List with extensions added to the base installation (default: [])

# MODULES
# -------
# include_modpath_extensions:Include $MODULEPATH extensions specified by module naming scheme. (default: True)
# modaliases:             Aliases to be defined in module file (default: {})
# modextrapaths:          Extra paths to be prepended in module file (default: {})
# modextravars:           Extra environment variables to be added to module file (default: {})
# modloadmsg:             Message that should be printed when generated module is loaded (default: {})
# modtclfooter:           Footer to include in generated module file (Tcl syntax) (default: )
# moduleclass:            Module class to be used for this software (default: base)
# moduleforceunload:      Force unload of all modules when loading the extension (default: False)
# moduleloadnoconflict:   Don't check for conflicts, unload other versions instead  (default: False)

# OTHER
# -----
# buildstats:             A list of dicts with build statistics (default: None)
